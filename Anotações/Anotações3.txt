Seção 6 - Django Staticfiles: arquivos estáticos (imagens, css, javascript e etc.)

# Sobre arquivos estáticos: 
  # Arquivos estáticos são arquivos que são entregues exatamente como estão salvos. Esses arquivos quase não sofrem 
    alterações, por isso, o navegador pode salvá-los em cache para que o conteúdo da página carregue mais rapidamente para o usuário final. 
    Alguns provedores de Internet também adicionam servidores no meio da rede que também podem fazer cache desse arquivos, assim o próprio 
    economiza sua banda de Internet externa.

  # Imagine que um cliente acessou uma página de um site e que, nessa página existe uma imagem que muda a cada acesso do cliente, e uma que muda
    1 vez por mês. Eu posso pôr a imagem que muda de mês em mês dentro de um arquivo dinâmico. Com isso, eu estaria comunicando ao navagador 
    do cliente que aquela é uma imagem estática, isto é, que raramente muda e que, ao invés de o navegador baixar ela todas as vezes que o 
    cliente acessar a página, ele pode baixar 1 vez e salvar ela em cache e só baixe novamente daqui a um mês. Dessa forma, o navegador 
    ecomizaria recursos e otimizará o carregamento da página, pois ao invés de baixar arquivos que nunca mudam, indo buscá-los no servidor, 
    ele está os salvando em cache e carregando-os diretamente, pois já os tem salvos.

# Configurando STATIC_URL, STATICFILES_DIRS e STATIC_ROOT
  # No arquivo settings.py, defina STATIC_URL = 'static/'. 'static/' será somente a URL que vai ser usada pelo servidor antes da pasta estática
    que estiver sendo acessada. É só um nome, mas por convenção, é importante manter como 'static/'.
  # 
# Adicionando Static Files em Recipes para o CSS / Configurando STATIC_URL, STATICFILES_DIRS e STATIC_ROOT
    # O django é inteligente o suficiente para procurar e ler arquivos estáticos que estiverem dentro de uma pasta chamada 'static', dentro de
      cada aplicação. Assim como foi criada a pasta 'templates' para que o django procurasse por templates, o processo ocorre com o 'static'.]

    # No arquivo settings.py, defina STATIC_URL = 'static/'. 'static/' será somente a URL que vai ser usada pelo servidor antes da pasta estática
      que estiver sendo acessada. É só um nome, mas por convenção, é importante manter como 'static/'.

    # Se for conveniente, cada aplicação deve ter uma pasta static. No entanto, seu projeto provavelmente irá ter arquivos estáticos que não 
      estão amarrados a uma app em particular. Então, além de utilizar uma pasta 'static' dentro da sua app, você pode definir uma lista de 
      diretórios (STATICFILES_DIRS) no seu settings.py, onde o django também irá procurar por arquivos estáticos. Os que não estiverem 
      relacionados a nenhuma app, serão os 'globais'. Para adicionar um diretório a essa lista de diretório, faz-se:

                              STATICFILES_DIRS = [
                                BASE_DIR / 'caminhodapastadestaticfiles',
                              ]
    
    # A STATIC_ROOT também é uma variável a ser posta dentro do arquivo settings.py e ela recebe o caminho de uma pasta na qual ficarão arma
      zenadas todas as pastas de arquivos estáticos do projeto. Geralmente, essa pasta é nomeada 'static' e é criada na raiz do projeto: 
      STATIC_ROOT = BASE_DIR / 'static'.
      Através do comando: python manage.py collectstatic, o prórpio django coleta todas as pastas de arquivos estáticos do projeto, cria
      a pasta do STATIC_ROOT e armazena as pastas de arquivos estáticos dentro dela.
    # Assim como é possível ter templates globais, é possível ter Staticfiles globais. Fora de qualquer app, crie a pasta base_templates e a 
      pasta base_static. Dentro de cada uma, crie uma pasta chamada 'global'.

    # Assim como dentro da pasta templates, por fins organizacionais, foi criada uma pasta com o nome da aplicação, para que evitasse problemas
      paths, cria-se uma pasta com o nome da aplicação dentro de 'static' (nesse caso, recipes).

    # Dentro de static/recipes, criaremos pastas para todo tipo de arquivo estático que for necessário (imagens, javascript, css, html, downloads
     e etc.). Inicia-se criando a pasta css.
        # Dentro dela, criamos, nesse projeto, um arquivo 'styles.css', para salvar a tag style que está em head.html e então removê-la de
          head.html, deixando head.html mais enxuto e organizado.
        # No entanto, como removemos a tag styles de head.html e pusemos dentro de styles.css, precisamos carregar o conteúdo de styles.css em
          head.html.
            # Para carregar os static files em um arquivo, utiliza-se o seguinte comando django:
                                        {% load static %} (considerando que o nome da pasta que você criou para Staticfiles é 'static').

            # Assim, estamos carregando todo o conteúdo da pasta static dentro do arquivo, mas não estamos utilizando nada. Para isso, ao invés
              de utilizar uma tag style, faz-se:
                                                <link rel="stylesheet" href="{% static 'recipes/css/styles.css' %}">
            
            # O {% load static %} faz o django chegar até a pasta 'static', após isso, precisamos informar o caminho do arquivo no href;
            # Esses pontos estão registrados na própria documentação do django.
             

 