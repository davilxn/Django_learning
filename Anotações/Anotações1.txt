Seção 2 - Ajustando o ambiente de desenvolvimento
Seção 3 - Ajustando o ambiente django + git e github com chaves SSH

# Ajustando ambiente de desenvolvimento
    # Crie a pasta do projeto.
    # Crie um ambiente virtual: python -m venv venv
    # Ativar ambiente virtual: .\venv\Scripts\activate   // Tá acessando o arquivo activate, dentro da pasta Scripts, dentro da pasta venv, dentro da pasta Django.
    # Ctrl + Shift + P   ->   Selecionar interpretador   ->   A versão recomendada
    # Quando for instalar bibliotecas e módulos, lembre-se de instalá-los dentro do ambiente virtual.
    # Instalar o django   ->   pip install django   ->   django-admin --version

# Usando o git e o github
    # Crie um repositório no gitbub para o o projeto
    # No venv:
        # git config --global user.name "Davi Santos Alexandrino"
        # git config --global user.email "davi.santos.alexandrino@gmail.com"
        # git config --global init.defaultBranch main
        # git init 
        # Com o repositório no github criado e o repositório no git criado, basta conectar os dois:
        # Geraremos uma chave SSH, porque se aproxima mais da realidade das empresas;
        # ssh-keygen   ->   Enter
        # Se quiser pôr senha, fique à vontade.
        # Your public key has been saved in ...
        # Abra o arquivo do path acima e copie a chave SSH.
        # Vá no seu perfil do github   ->  (em nova aba) Settings   ->   SSH e GPG keys   ->   new SSH key   ->   Cole e salve.
        # Volte na janela do repositório do github e copie o link SSH.
        # No venv: git remote add origin olinkcopiado. Isso faz a conexão entre o repositório do git e o do github.
        # Dentro da pasta do projeto (Django) crie o famoso arquivo .gitignore e digite "venv", dentro.
            # .gitignore informa quais pastas e arquivos não devem ser adicionados ao repositório do git.
            # Posteriormente, pegaremos um .gitignore que já vem praticamente pronto, pra quase todo projeto.
        # git status
        # (Se necessário) git add .
        # git commit -m "Mensagem"
        # (Se necessário) git push
        # O comando git push é usado para enviar o conteúdo do repositório local para um repositório remoto.
        # O comando git status exibe as condições do diretório de trabalho e da área de staging. Ele permite 
        que você veja quais alterações foram despreparadas, quais não foram e quais arquivos não estão sendo monitorados pelo Git.

        # Primeiro repositório do curso: https://github.com/luizomf/curso-django-projeto1

# Iniciando com o Django (Tudo sendo executado dentro do ambiente virtual, cuidado)
    # No venv: django-admin --help // Para ver todos os comandos importantes do django-admin
    # django-admin startproject nomedoprojeto .   // O ponto no final é necessário para que o django saiba onde criar a pasta do projeto com os arquivos do django essenciais. Só vai criar uma pasta com todos.
    # Veja o django em ação, ao criar um servidor próprio, como ambiente particular de desenvolvimento: python manage.py runserver (para fechar o servidor, tecle Ctrl + C)
        # Esse é um servidor em modo de desenvolvimento. Quando formos publicar o projeto, será em outro tipo de servidor.
        # You have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): 
          admin, auth, contenttypes, sessions. Run'python manage.py migrate' to apply them.   ->   Diz que existem tabelas que precisam ser 
          implementadas no banco de dados e que o prórpio django se encarrega disso, com o comando python manage.py migrate.
        # Também aparece uma mensagem dizendo que o servidor está sendo executado segundo as configurações do arquivo 'settings.py'.
    # Ao criar o projeto django, um arquivo db.sqlite3 foi criado. Ele já está dentro do .gitignore.

# Entendendo os arquivos django
    # O manage.py é funciona praticamente como o django-admin. Todos os comandos acessados pelo manage.py, podem ser acessados pelo manage.py, A
      diferença é que no manage.py existe uma linha 'os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'projeto1.settings')', que carrega automatica
      mente as configurações do arquivo settings do nosso projeto, ao contrário do que aconteceria, utilizando o django-admin.
    # Dica de ouro: django-admin só é usado para iniciar o projeto django (django-admin startproject). Após isso, só se usa o manage.py
    # __init__.py é um arquivo que serve para indicar ao Python que a pasta projeto1 é um pacote.
    # asgi.py e wsgi.py são arquivos usados para fazer a ligação entre o django e um servidor web externo. Alguns servidores usam um, outros 
      usam o outro.
    # Os arquivos mais utilizados no início são o settings.py e o urls.py.

# Navegando no cmd
    # cd.. -> Volta para a raiz dos arquivos.
    # cd nomedapastaquedesejacessar
    # dir -> Ver o que tem dentro da pasta que está
    # cd Users\davia\Programação\Python\Django